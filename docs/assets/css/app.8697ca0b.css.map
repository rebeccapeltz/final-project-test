{"version":3,"sources":["webpack:///src/src/App.vue","app.8697ca0b.css","webpack:///src/views/src/views/Rhymesaurus.vue"],"names":[],"mappings":"AAcA,KACA,6CAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aAAA,CACA,eCZA,CC4EA,8BACA,gBDxEA,CC0EA,kCACA,eAAA,CACA,gBAAA,CACA,iBAAA,CACA,4BAAA,CACA,WAAA,CACA,gBAAA,CACA,aAAA,CACA,eAAA,CACA,0BAAA,CACA,aDxEA,CC0EA,wBACA,eAAA,CACA,aAAA,CACA,eAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,gBDxEA,CC0EA,wCAEA,eDxEA,CC0EA,4BACA,oBAAA,CACA,SDxEA,CC0EA,6BACA,oBAAA,CACA,WAAA,CACA,qBAAA,CACA,aAAA,CACA,WAAA,CACA,gBAAA,CACA,UAAA,CACA,yBDxEA,CC0EA,2BACA,oBDxEA,CC0EA,4BACA,oBAAA,CACA,SAAA,CACA,aAAA,CACA,aDxEA,CC0EA,mBACA,aDxEA","file":"app.8697ca0b.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Rhymesaurus: The Rhyming Thesaurus</h1>\n    <router-view/>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'app'\n}\n</script>\n\n<style>\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n\n\n.rhymesaurus[data-v-5b884d3c] {\n  font-size: 1.4rem;\n}\ninput[type=\"text\"][data-v-5b884d3c] {\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: 1px solid #333;\n  width: 300px;\n  font-size: 1.4rem;\n  color: #2c3e50;\n  font-weight: 300;\n  background: rgba(0, 0, 0, 0.02);\n  padding: 0.5rem;\n}\nbutton[data-v-5b884d3c] {\n  background: #333;\n  padding: 0.5rem;\n  font-weight: 300;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  font-size: 1.4rem;\n}\nh1[data-v-5b884d3c],\nh2[data-v-5b884d3c] {\n  font-weight: normal;\n}\nul.results[data-v-5b884d3c] {\n  list-style-type: none;\n  padding: 0;\n}\n.results li[data-v-5b884d3c] {\n  display: inline-block;\n  margin: 10px;\n  border: solid 1px #333;\n  padding: 0.5rem;\n  width: 200px;\n  min-height: 100px;\n  color: #fff;\n  background: rgba(0, 0, 0, 0.7);\n}\nul.errors[data-v-5b884d3c] {\n  list-style-type: none;\n}\n.errors li[data-v-5b884d3c] {\n  border: 1px solid red;\n  color: red;\n  padding: 0.5rem;\n  margin: 10px 0;\n}\na[data-v-5b884d3c] {\n  color: #42b983;\n}\n\n\n/*# sourceMappingURL=app.8697ca0b.css.map*/","<template>\n  <div class=\"rhymesaurus\">\n    <form v-on:submit.prevent=\"findWords\">\n      <!-- TODO: Use a submit event handler to allow the findWords method to handle this form submission. -->\n      <p>\n        Find rhymes for\n        <input type=\"text\" v-model=\"rhyme\"> related to\n        <input type=\"text\" v-model=\"phrase\">\n        <button type=\"submit\">Search</button>\n      </p>\n    </form>\n    <!-- TODO: Add a v-if conditional to make this results list show only if there are results and if the length is greater than 0. -->\n    <ul v-if=\"results && results.length > 0\" class=\"results\">\n      <li v-for=\"(item,index) of results\" :key=\"index\">\n        <p>\n          <strong>{{item.word}}</strong>\n        </p>\n        <p>{{item.score}}</p>\n      </li>\n    </ul>\n\n    <!-- TODO: Add a `v-else-if` conditional to make this message only show if there are no results returned (but we have actually attempted a request). -->\n    <div v-if=\"results && results.length === 0\" class=\"no-results\">\n      <h2>No Words Found</h2>\n      <p>Please adjust your search to find more words.</p>\n    </div>\n\n    <!-- TODO: Add a v-if conditional to make this errors list show only if there are errors and if the length is greater than 0. -->\n    <ul v-if=\"errors && errors.length > 0\" class=\"errors\">\n      <!-- TODO: Add a v-for loop to the LI tag to loop through the errors. -->\n      <li v-for=\"(error,index) of errors\" :key=\"index\">\n        <p>\n          <strong>{{error}}</strong>\n        </p>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\n// TODO: Import axios properly here.\nimport axios from \"axios\";\nexport default {\n  name: \"Rhymesaurus\",\n  data() {\n    return {\n      results: null,\n      errors: [],\n      phrase: this.phrase,\n      rhyme: this.rhyme\n    };\n  },\n  methods: {\n    findWords: function() {\n      axios\n        .get(\"https://api.datamuse.com/words\", {\n          params: {\n            ml: this.phrase,\n            rel_rhy: this.rhyme\n          }\n        })\n        .then(response => {\n          this.results = response.data;\n        })\n        .catch(error => {\n          this.errors.push(error);\n        });\n    }\n  }\n  // TODO: Create the findWords method.\n  // TODO: Complete the following inside of the findWords method.\n  // TODO: Create an axios.get statement that requests from https://api.datamuse.com/words\n  // TODO: Create the params object\n  // TODO: Set the `ml` parameter equal to `this.phrase`\n  // TODO: Set the `rel_ehy` parameter equal to `this.rhyme`\n  // TODO: Create a `then` clause\n  // TODO: Inside the `then` clause, set `this.results` equal to `response.data`\n  // TODO: Create a `catch` clause\n  // TODO: Inside the `catch` clause, push the new `error` onto the `this.errors` array\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n.rhymesaurus {\n  font-size: 1.4rem;\n}\ninput[type=\"text\"] {\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-bottom: 1px solid #333;\n  width: 300px;\n  font-size: 1.4rem;\n  color: #2c3e50;\n  font-weight: 300;\n  background: rgba(0, 0, 0, 0.02);\n  padding: 0.5rem;\n}\nbutton {\n  background: #333;\n  padding: 0.5rem;\n  font-weight: 300;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  font-size: 1.4rem;\n}\nh1,\nh2 {\n  font-weight: normal;\n}\nul.results {\n  list-style-type: none;\n  padding: 0;\n}\n.results li {\n  display: inline-block;\n  margin: 10px;\n  border: solid 1px #333;\n  padding: 0.5rem;\n  width: 200px;\n  min-height: 100px;\n  color: #fff;\n  background: rgba(0, 0, 0, 0.7);\n}\nul.errors {\n  list-style-type: none;\n}\n.errors li {\n  border: 1px solid red;\n  color: red;\n  padding: 0.5rem;\n  margin: 10px 0;\n}\na {\n  color: #42b983;\n}\n</style>"]}